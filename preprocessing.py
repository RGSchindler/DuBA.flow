import os 
import shutil
import logging
from dataclasses import dataclass

import pandas as pd 
import process



logger = logging.getLogger(__name__)

@dataclass
class Preprocessing:
    idx_df : pd.DataFrame
    ref_df: pd.DataFrame

    def __post_init__(self) -> None:
        self.make_dirs(self.idx_df.SampleID.values)
        self.move_refs(self.ref_df)
        self.run_filter()
        self.run_demultiplexing()
        self.move_samples(self.idx_df)
        self.cleanup()


    def make_dirs(self, sample_ids: list[str]) -> None:
        ''' Create a output directory for each sample '''
        os.makedirs("input/output", exist_ok=True)
        os.makedirs("input/misc", exist_ok=True)
        for sample in sample_ids:
            os.makedirs(f"input/output/{sample}", exist_ok=True)
        logger.info("Output directories successfully created")


    def move_refs(self, refs_df:pd.DataFrame) -> None:
        ''' Move reference files to each sample's output folder '''
        for sample, ref in zip(refs_df.SampleID.values, refs_df.ReferenceFile.values):
            shutil.copy(f"input/references/{ref}", f"input/output/{sample}/{ref}")


    def run_filter(self) -> None:
        ''' 
        Filter ONT reads by quality and length.
        Default:
            Quality = 10 
            Lenght = 50
        '''
        logger.info("Starting sequence filtering")
        unzip = process.run("gunzip -c input/input.fastq.gz")
        chopper = process.run("micromamba run -n chopper chopper -q 10 -l 50", stdin=unzip.stdout)
        process.run("gzip > input/filtered.fastq.gz", stdin=chopper.stdout, chained=False)
        logger.info("Sequence filtering completed")


    def run_demultiplexing(self) -> None:
        '''Primer demultiplexing for sequenced reads'''
        logger.info("Start demultiplexing")
        process.run("python3 minibar.py -T -F input/IndexCombination.tsv input/filtered.fastq.gz -P ''", chained=False)
        logger.info("Finished demultiplexing")


    def move_samples(self, idx_df:pd.DataFrame) -> None:
        ''' Move samples to their corresponding output folder'''
        for sample in idx_df.SampleID.values:
            try:
                shutil.move(f"{sample}.fastq", f"input/output/{sample}/{sample}.fastq")
            except FileNotFoundError:
                pass 

        for file in os.listdir("input/"):
            if file.endswith(".fastq"):
                shutil.move(f"input/{file}", f"input/misc/{file}")


    def cleanup(self) -> None:
        ''' Delte unnecessary files generated by minibar'''
        for file in ["Multiple_Matches.fastq", "unk.fastq"]:
            if os.path.exists(file):
                os.remove(file)


if __name__ == "__main__":
    pass
